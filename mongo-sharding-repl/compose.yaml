services:
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27010:27010"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27010"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    
  shard1-rep1:
    image: mongo:latest # docker образ
    container_name: shard1-rep1
    command: --shardsvr --replSet shard1 --bind_ip_all --port 27011
    ports:
      - 27011:27011
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-rep1-data:/data/db

  shard1-rep2:
    image: mongo:latest # docker образ
    container_name: shard1-rep2
    command: --shardsvr --replSet shard1 --bind_ip_all --port 27012
    ports:
      - 27012:27012
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-rep2-data:/data/db

  
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27013:27013"
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27013"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  shard2-rep1:
    image: mongo:latest # docker образ
    container_name: shard2-rep1
    command: --shardsvr --replSet shard2 --bind_ip_all --port 27014
    ports:
      - 27014:27014
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2-rep1-data:/data/db

  shard2-rep2:
    image: mongo:latest # docker образ
    container_name: shard2-rep2
    command: --shardsvr --replSet shard2 --bind_ip_all --port 27015
    ports:
      - 27015:27015
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - shard2-rep2-data:/data/db
      
  
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s


  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/24

volumes:
  config-data:
  shard1-data:
  shard1-rep1-data:
  shard1-rep2-data:
  shard2-data:
  shard2-rep1-data:
  shard2-rep2-data:
